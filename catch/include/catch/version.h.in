///
/// @file    Version.h
/// @brief   Report the version for this package.
///
#pragma once

#include <string>
#include <sstream>

namespace intrinsicCalibrationOptimization {
namespace @PROJECT_NAME@ {
/// The current major version.
#define VERSION_MAJOR @VERSION_MAJOR@

/// The current minor version.
#define VERSION_MINOR @VERSION_MINOR@

/// The current patch level.
#define VERSION_PATCH @VERSION_PATCH@

/// The current svn revision.
#define VCS_REVISION "@VCS_REVISION@"

/// True if the current version is newer than the given one.
#define VERSION_GT(MAJOR, MINOR, PATCH) \
  ((VERSION_MAJOR > MAJOR) ||           \
   (VERSION_MAJOR ==                    \
    MAJOR&&(VERSION_MINOR > MINOR || (VERSION_MINOR == MINOR&& VERSION_PATCH > PATCH))))

/// True if the current version is equal or newer to the given.
#define VERSION_GE(MAJOR, MINOR, PATCH) \
  ((VERSION_MAJOR > MAJOR) ||           \
   (VERSION_MAJOR ==                    \
    MAJOR&&(VERSION_MINOR > MINOR || (VERSION_MINOR == MINOR&& VERSION_PATCH >= PATCH))))

/// True if the current version is older than the given one.
#define VERSION_LT(MAJOR, MINOR, PATCH) \
  ((VERSION_MAJOR < MAJOR) ||           \
   (VERSION_MAJOR ==                    \
    MAJOR&&(VERSION_MINOR < MINOR || (VERSION_MINOR == MINOR&& VERSION_PATCH < PATCH))))

/// True if the current version is older or equal to the given.
#define VERSION_LE(MAJOR, MINOR, PATCH) \
  ((VERSION_MAJOR < MAJOR) ||           \
   (VERSION_MAJOR ==                    \
    MAJOR&&(VERSION_MINOR < MINOR || (VERSION_MINOR == MINOR&& VERSION_PATCH <= PATCH))))

/// Information about the current ProjB version.
class Version {
public:
  /// @return the current major version of ProjB.
  static int getMajor()
  {
    return VERSION_MAJOR;
  }

  /// @return the current minor version of ProjB.
  static int getMinor()
  {
    return VERSION_MINOR;
  }

  /// @return the current patch level of ProjB.
  static int getPatch()
  {
    return VERSION_PATCH;
  }

  /// @return the current ProjB version (MM.mm.pp).
  static std::string getString()
  {
    std::ostringstream version;
    version << VERSION_MAJOR << '.' << VERSION_MINOR << '.' << VERSION_PATCH;
    return version.str();
  }

  /// @return the git revision.
  static std::string getRevision()
  {
    return VCS_REVISION;
  }

  /// @return the current version plus the git revision (MM.mm.pp.rev).
  static std::string getRevString()
  {
    std::ostringstream version;
    version << getString() << '.' << VCS_REVISION;
    return version.str();
  }
  
};

} // namespace @PROJECT_NAME@
} // namespace intrinsicCalibrationOptimization

